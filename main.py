import os

import argostranslate.package
import argostranslate.translate
import discord
from dotenv.main import load_dotenv
import langdetect


languages = {
    "ðŸ‡®ðŸ‡³": 'hi',
    "ðŸ‡¦ðŸ‡·": 'es',
    "ðŸ‡¦ðŸ‡º": 'en',
    "ðŸ‡§ðŸ‡©": 'bn',
    "ðŸ‡§ðŸ‡·": 'pt',
    "ðŸ‡¨ðŸ‡¦": 'en',
    "ðŸ‡¨ðŸ‡³": 'zh-CN',
    "ðŸ‡¨ðŸ‡¿": 'cs',
    "ðŸ‡­ðŸ‡·": 'hr',
    "ðŸ‡µðŸ‡±": 'pl',
    "ðŸ‡·ðŸ‡´": 'ro',
    "ðŸ‡·ðŸ‡º": 'ru',
    "ðŸ‡¸ðŸ‡°": 'sk',
    "ðŸ‡¹ðŸ‡·": 'tr',
    "ðŸ‡¬ðŸ‡§": 'en',
    "ðŸ‡ºðŸ‡¸": 'en',
    "ðŸ‡«ðŸ‡·": 'fr',
    "ðŸ‡©ðŸ‡ª": 'de',
    "ðŸ‡ªðŸ‡¸": 'es',
    "ðŸ‡³ðŸ‡±": 'nl',
    "ðŸ‡®ðŸ‡¹": 'it',
    "ðŸ‡¬ðŸ‡¦": 'ga',
    "ðŸ‡µðŸ‡¹": 'pt',
    "ðŸ‡³ðŸ‡µ": 'ne',
    "ðŸ‡¸ðŸ‡·": 'sr',
    "ðŸ‡ºðŸ‡¦": 'uk',
    "ðŸ‡»ðŸ‡³": 'vi',
    "ðŸ‡®ðŸ‡©": 'id',
    "ðŸ‡µðŸ‡­": 'tl',
    "ðŸ‡¯ðŸ‡µ": 'ja',
    "ðŸ‡­ðŸ‡º": 'hu',
    "ðŸ‡®ðŸ‡¸": 'is',
    "ðŸ‡«ðŸ‡®": 'fi',
    "ðŸ‡§ðŸ‡¼": 'et',
    "ðŸ‡§ðŸ‡¬": 'bg',
    "ðŸ‡®ðŸ‡±": 'he',
    "ðŸ‡°ðŸ‡·": 'ko',
    "ðŸ‡±ðŸ‡»": 'lv',
    "ðŸ‡±ðŸ‡§": 'lb',
    "ðŸ‡ºðŸ‡¿": 'uz',
    "ðŸ‡¸ðŸ‡¦": 'ar',
    "ðŸ‡¿ðŸ‡¦": 'af'
}


class Translator:
    def __init__(self):
        print('Initializing Argos Translate package')
        argostranslate.package.update_package_index()
        self.available_packages = argostranslate.package.get_available_packages()
        self.installed_packages = argostranslate.package.get_installed_packages()

    def ensure_package(self, from_code: str, to_code: str):
        for package in self.available_packages:
            if package.from_code != from_code or package.to_code != to_code:
                continue
            if package in self.installed_packages:
                break
            print(f'Translator: Installing package {package}...')
            argostranslate.package.install_from_path(package.download())
            self.installed_packages.append(package)
            break
        else:
            raise ValueError(f'Package not found: {from_code}->{to_code}')

    def translate(self, original_text: str, target_language: str) -> str:
        source_language = langdetect.detect(original_text)
        self.ensure_package(source_language, target_language)
        result = argostranslate.translate.translate(original_text, source_language, target_language)
        return result


def main():
    load_dotenv()
    intents = discord.Intents.default()
    intents.message_content = True
    client = discord.Client(intents=intents)

    translator = Translator()

    @client.event
    async def on_ready():
        print(f'We logged in Discord as {client.user}')

    @client.event
    async def on_reaction_add(reaction, user):
        target_language = languages.get(reaction.emoji)
        if not target_language:
            return
        
        source_message = str(reaction.message.content)
        target_message = translator.translate(source_message, target_language)
        await reaction.message.channel.send(target_message)

    token = os.getenv('DISCORD_TOKEN')
    client.run(token)


if __name__ == '__main__':
    main()
