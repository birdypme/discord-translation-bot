import os

import discord
from dotenv.main import load_dotenv
from google.cloud import translate_v2


languages = {
    "ðŸ‡®ðŸ‡³": 'hi',
    "ðŸ‡¦ðŸ‡·": 'es',
    "ðŸ‡¦ðŸ‡º": 'en',
    "ðŸ‡§ðŸ‡©": 'bn',
    "ðŸ‡§ðŸ‡·": 'pt',
    "ðŸ‡¨ðŸ‡¦": 'en',
    "ðŸ‡¨ðŸ‡³": 'zh-CN',
    "ðŸ‡¨ðŸ‡¿": 'cs',
    "ðŸ‡­ðŸ‡·": 'hr',
    "ðŸ‡µðŸ‡±": 'pl',
    "ðŸ‡·ðŸ‡´": 'ro',
    "ðŸ‡·ðŸ‡º": 'ru',
    "ðŸ‡¸ðŸ‡°": 'sk',
    "ðŸ‡¹ðŸ‡·": 'tr',
    "ðŸ‡¬ðŸ‡§": 'en',
    "ðŸ‡ºðŸ‡¸": 'en',
    "ðŸ‡«ðŸ‡·": 'fr',
    "ðŸ‡©ðŸ‡ª": 'de',
    "ðŸ‡ªðŸ‡¸": 'es',
    "ðŸ‡³ðŸ‡±": 'nl',
    "ðŸ‡®ðŸ‡¹": 'it',
    "ðŸ‡¬ðŸ‡¦": 'ga',
    "ðŸ‡µðŸ‡¹": 'pt',
    "ðŸ‡³ðŸ‡µ": 'ne',
    "ðŸ‡¸ðŸ‡·": 'sr',
    "ðŸ‡ºðŸ‡¦": 'uk',
    "ðŸ‡»ðŸ‡³": 'vi',
    "ðŸ‡®ðŸ‡©": 'id',
    "ðŸ‡µðŸ‡­": 'tl',
    "ðŸ‡¯ðŸ‡µ": 'ja',
    "ðŸ‡­ðŸ‡º": 'hu',
    "ðŸ‡®ðŸ‡¸": 'is',
    "ðŸ‡«ðŸ‡®": 'fi',
    "ðŸ‡§ðŸ‡¼": 'et',
    "ðŸ‡§ðŸ‡¬": 'bg',
    "ðŸ‡®ðŸ‡±": 'he',
    "ðŸ‡°ðŸ‡·": 'ko',
    "ðŸ‡±ðŸ‡»": 'lv',
    "ðŸ‡±ðŸ‡§": 'lb',
    "ðŸ‡ºðŸ‡¿": 'uz',
    "ðŸ‡¸ðŸ‡¦": 'ar',
    "ðŸ‡¿ðŸ‡¦": 'af'
}


class Translator:
    def __init__(self):
        print(f'Connecting to Google Cloud with {os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")}')
        self.client = translate_v2.Client()

    def translate(self, original_text: str, target_language: str) -> str:
        result = self.client.translate(original_text, target_language=target_language)
        # dict keys: input, translatedText, detectedSourceLanguage
        return result['translatedText']


def main():
    load_dotenv()
    intents = discord.Intents.default()
    intents.message_content = True
    client = discord.Client(intents=intents)

    translator = Translator()

    @client.event
    async def on_ready():
        print(f'We logged in as {client.user}')

    @client.event
    async def on_reaction_add(reaction, user):
        print(f'got reaction {reaction} from {user}')
        print(f'reaction.emoji={reaction.emoji}')
        if not reaction.emoji:
            return
        
        target_language = languages.get(reaction.emoji)
        print(f'target_language={target_language}')
        if not target_language:
            return
        
        source_message = str(reaction.message.content)
        print(f'Translating {source_message!r} to {target_language} for {user}')
        target_message = translator.translate(source_message, target_language)
        print(f"Translation is {target_message}")
        await reaction.message.channel.send(target_message)

    token = os.getenv('DISCORD_TOKEN')
    client.run(token)


if __name__ == '__main__':
    main()
